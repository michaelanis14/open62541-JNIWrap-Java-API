/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION) || defined(DEBUG_DIRECTOR_THREAD_NAME)
#include <iostream>
#endif

#include <exception>

#if defined(SWIG_JAVA_USE_THREAD_NAME)

#if !defined(SWIG_JAVA_GET_THREAD_NAME)
namespace Swig {
  SWIGINTERN int GetThreadName(char *name, size_t len);
}

#if defined(__linux__)

#include <sys/prctl.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
#if defined(PR_GET_NAME)
  return prctl(PR_GET_NAME, (unsigned long)name, 0, 0, 0);
#else
  (void)name;
  return 1;
#endif
}

#elif defined(__unix__) || defined(__APPLE__)

#include <pthread.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  return pthread_getname_np(pthread_self(), name, len);
}

#else

SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
  (void)name;
  return 1;
}
#endif

#endif

#endif

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
        JavaVMAttachArgs args;
        args.version = JNI_VERSION_1_2;
        args.group = NULL;
        args.name = NULL;
#if defined(SWIG_JAVA_USE_THREAD_NAME)
        char thread_name[64];  // MAX_TASK_COMM_LEN=16 is hard-coded in the Linux kernel and MacOS has MAXTHREADNAMESIZE=64.
        if (Swig::GetThreadName(thread_name, sizeof(thread_name)) == 0) {
          args.name = thread_name;
#if defined(DEBUG_DIRECTOR_THREAD_NAME)
          std::cout << "JNIEnvWrapper: thread name: " << thread_name << std::endl;
        } else {
          std::cout << "JNIEnvWrapper: Couldn't set Java thread name" << std::endl;
#endif
        }
#endif
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, &args);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, &args);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    // Return a C string of the exception message in the jthrowable passed in the constructor
    // If no message is available, null_string is return instead
    const char *message(const char *null_string = "Could not get exception message in JavaExceptionMessage") const {
      return message_.c_str(null_string);
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : jenv_(jenv), throwable_(throwable), classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message(0));
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : jenv_(0), throwable_(0), classname_(0), msg_(msg ? copystr(msg) : 0) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_ ? msg_ : "Unspecified DirectorException message";
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void throwException(JNIEnv *jenv) const {
      if (jenv) {
        if (jenv == jenv_ && throwable_) {
          // Throw original exception if not already pending
          jthrowable throwable = jenv->ExceptionOccurred();
          if (throwable && jenv->IsSameObject(throwable, throwable_) == JNI_FALSE) {
            jenv->ExceptionClear();
            throwable = 0;
          }
          if (!throwable)
            jenv->Throw(throwable_);
        } else {
          // Try and reconstruct original exception, but original stacktrace is not reconstructed
          jenv->ExceptionClear();

          jmethodID ctorMethodID = 0;
          jclass throwableclass = 0;
          if (classname_) {
            throwableclass = jenv->FindClass(classname_);
            if (throwableclass)
              ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
          }

          if (ctorMethodID) {
            jenv->ThrowNew(throwableclass, what());
          } else {
            SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
          }
        }
      }
    }

    // Deprecated - use throwException
    void raiseJavaException(JNIEnv *jenv) const {
      throwException(jenv);
    }

    // Create and throw the DirectorException
    static void raise(JNIEnv *jenv, jthrowable throwable) {
      throw DirectorException(jenv, throwable);
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    JNIEnv *jenv_;
    jthrowable throwable_;
    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  // Note side effect of clearing any pending exceptions
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_open62541JNI = NULL;
    jmethodID director_method_ids[5];
  }
}

#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


#include "open62541.h"
#include "server_api_base.h"
#include "client_api_base.h"
#include "types_map.h"


#include <stdint.h>		// Use the C99 official header


typedef union {
		UA_UInt32     numeric;
		UA_String     string;
		UA_Guid       guid;
		UA_ByteString byteString;
	} Identifier;


static int *new_intp() { 
  return new int(); 
}

static int *copy_intp(int value) { 
  return new int(value); 
}

static void delete_intp(int *obj) { 
  if (obj) delete obj; 
}

static void intp_assign(int *obj, int value) {
  *obj = value;
}

static int intp_value(int *obj) {
  return *obj;
}



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "open62541_wrap.h"

SwigDirector_ServerAPIBase::SwigDirector_ServerAPIBase(JNIEnv *jenv) : ServerAPIBase(), Swig::Director(jenv) {
}

void SwigDirector_ServerAPIBase::monitored_itemChanged(UA_NodeId const *nodeId, UA_Int32 const value) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jnodeId = 0 ;
  jint jvalue  ;
  
  if (!swig_override[0]) {
    ServerAPIBase::monitored_itemChanged(nodeId,value);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((UA_NodeId **)&jnodeId) = (UA_NodeId *) nodeId; 
    jvalue = (jint) value;
    jenv->CallStaticVoidMethod(Swig::jclass_open62541JNI, Swig::director_method_ids[0], swigjobj, jnodeId, jvalue);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ServerAPIBase::monitored_itemChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ServerAPIBase::methods_callback(UA_NodeId const *methodId, UA_NodeId const *objectId, UA_String input, UA_String output, ServerAPIBase *jAPIBase) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmethodId = 0 ;
  jlong jobjectId = 0 ;
  jstring jinput  ;
  jstring joutput  ;
  jlong jjAPIBase = 0 ;
  
  if (!swig_override[1]) {
    ServerAPIBase::methods_callback(methodId,objectId,input,output,jAPIBase);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((UA_NodeId **)&jmethodId) = (UA_NodeId *) methodId; 
    *((UA_NodeId **)&jobjectId) = (UA_NodeId *) objectId; 
    
    {
      char* $2 = (char*)UA_malloc(sizeof(char)*(&input)->length + 1);
      memcpy($2, (&input)->data, (&input)->length);
      $2[(&input)->length] = '\0';
      //strcpy($2, "123456789"); // with the null terminator the string adds up to 10 bytes
      jinput = (jenv)->NewStringUTF($2);	
    }  
    
    
    {
      char* $2 = (char*)UA_malloc(sizeof(char)*(&output)->length + 1);
      memcpy($2, (&output)->data, (&output)->length);
      $2[(&output)->length] = '\0';
      //strcpy($2, "123456789"); // with the null terminator the string adds up to 10 bytes
      joutput = (jenv)->NewStringUTF($2);	
    }  
    
    *((ServerAPIBase **)&jjAPIBase) = (ServerAPIBase *) jAPIBase; 
    jenv->CallStaticVoidMethod(Swig::jclass_open62541JNI, Swig::director_method_ids[1], swigjobj, jmethodId, jobjectId, jinput, joutput, jjAPIBase);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ServerAPIBase::methods_callback ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

SwigDirector_ServerAPIBase::~SwigDirector_ServerAPIBase() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ServerAPIBase::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "monitored_itemChanged", "(Lopen62Wrap/UA_NodeId;I)V", NULL 
    },
    {
      "methods_callback", "(Lopen62Wrap/UA_NodeId;Lopen62Wrap/UA_NodeId;Ljava/lang/String;Ljava/lang/String;Lopen62Wrap/ServerAPIBase;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("open62Wrap/ServerAPIBase");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ClientAPIBase::SwigDirector_ClientAPIBase(JNIEnv *jenv) : ClientAPIBase(), Swig::Director(jenv) {
}

void SwigDirector_ClientAPIBase::monitored_itemChanged(UA_NodeId nodeId, UA_Int32 const value) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jnodeId  ;
  jint jvalue  ;
  
  if (!swig_override[0]) {
    ClientAPIBase::monitored_itemChanged(nodeId,value);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jnodeId = 0;
    *((UA_NodeId **)&jnodeId) = new UA_NodeId((const UA_NodeId &)nodeId); 
    jvalue = (jint) value;
    jenv->CallStaticVoidMethod(Swig::jclass_open62541JNI, Swig::director_method_ids[2], swigjobj, jnodeId, jvalue);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ClientAPIBase::monitored_itemChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ClientAPIBase::client_connected(ClientAPIBase *jClientAPIBase, UA_Client *client, char *serverUrl) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jjClientAPIBase = 0 ;
  jlong jclient = 0 ;
  jstring jserverUrl = 0 ;
  
  if (!swig_override[1]) {
    ClientAPIBase::client_connected(jClientAPIBase,client,serverUrl);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ClientAPIBase **)&jjClientAPIBase) = (ClientAPIBase *) jClientAPIBase; 
    *((UA_Client **)&jclient) = (UA_Client *) client; 
    jserverUrl = 0;
    if (serverUrl) {
      jserverUrl = jenv->NewStringUTF((const char *)serverUrl);
      if (!jserverUrl) return ;
    }
    Swig::LocalRefGuard serverUrl_refguard(jenv, jserverUrl);
    jenv->CallStaticVoidMethod(Swig::jclass_open62541JNI, Swig::director_method_ids[3], swigjobj, jjClientAPIBase, jclient, jserverUrl);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ClientAPIBase::client_connected ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ClientAPIBase::methods_callback(UA_NodeId const objectId, UA_NodeId const methodId, UA_String input, UA_String output, ClientAPIBase *jAPIBase) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jobjectId  ;
  jlong jmethodId  ;
  jstring jinput  ;
  jstring joutput  ;
  jlong jjAPIBase = 0 ;
  
  if (!swig_override[2]) {
    ClientAPIBase::methods_callback(objectId,methodId,input,output,jAPIBase);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jobjectId = 0;
    *((UA_NodeId **)&jobjectId) = new UA_NodeId((const UA_NodeId &)objectId); 
    jmethodId = 0;
    *((UA_NodeId **)&jmethodId) = new UA_NodeId((const UA_NodeId &)methodId); 
    
    {
      char* $2 = (char*)UA_malloc(sizeof(char)*(&input)->length + 1);
      memcpy($2, (&input)->data, (&input)->length);
      $2[(&input)->length] = '\0';
      //strcpy($2, "123456789"); // with the null terminator the string adds up to 10 bytes
      jinput = (jenv)->NewStringUTF($2);	
    }  
    
    
    {
      char* $2 = (char*)UA_malloc(sizeof(char)*(&output)->length + 1);
      memcpy($2, (&output)->data, (&output)->length);
      $2[(&output)->length] = '\0';
      //strcpy($2, "123456789"); // with the null terminator the string adds up to 10 bytes
      joutput = (jenv)->NewStringUTF($2);	
    }  
    
    *((ClientAPIBase **)&jjAPIBase) = (ClientAPIBase *) jAPIBase; 
    jenv->CallStaticVoidMethod(Swig::jclass_open62541JNI, Swig::director_method_ids[4], swigjobj, jobjectId, jmethodId, jinput, joutput, jjAPIBase);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ClientAPIBase::methods_callback ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

SwigDirector_ClientAPIBase::~SwigDirector_ClientAPIBase() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ClientAPIBase::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "monitored_itemChanged", "(Lopen62Wrap/UA_NodeId;I)V", NULL 
    },
    {
      "client_connected", "(Lopen62Wrap/ClientAPIBase;Lopen62Wrap/SWIGTYPE_p_UA_Client;Ljava/lang/String;)V", NULL 
    },
    {
      "methods_callback", "(Lopen62Wrap/UA_NodeId;Lopen62Wrap/UA_NodeId;Ljava/lang/String;Ljava/lang/String;Lopen62Wrap/ClientAPIBase;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("open62Wrap/ClientAPIBase");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_ServerAPIBase_1running_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ServerAPIBase *arg1 = (ServerAPIBase *) 0 ;
  UA_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ServerAPIBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->running = arg2;
}


SWIGEXPORT jboolean JNICALL Java_open62Wrap_open62541JNI_ServerAPIBase_1running_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ServerAPIBase *arg1 = (ServerAPIBase *) 0 ;
  UA_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ServerAPIBase **)&jarg1; 
  result = (UA_Boolean) ((arg1)->running);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_ServerAPIBase_1Get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ServerAPIBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ServerAPIBase *)ServerAPIBase::Get();
  *(ServerAPIBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_ServerAPIBase_1stopHandler(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  ServerAPIBase::stopHandler(arg1);
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_ServerAPIBase_1CreateServerDefaultConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UA_Server *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UA_Server *)ServerAPIBase::CreateServerDefaultConfig();
  *(UA_Server **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_ServerAPIBase_1CreateServer(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  UA_UInt16 arg2 ;
  UA_Server *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (UA_UInt16)jarg2; 
  result = (UA_Server *)ServerAPIBase::CreateServer(arg1,arg2);
  *(UA_Server **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_ServerAPIBase_1RunServer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  UA_Server *arg1 = (UA_Server *) 0 ;
  UA_StatusCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UA_Server **)&jarg1; 
  result = (UA_StatusCode)ServerAPIBase::RunServer(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_ServerAPIBase_1AddMonitoredItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ServerAPIBase *arg1 = (ServerAPIBase *) 0 ;
  UA_Server *arg2 = (UA_Server *) 0 ;
  UA_NodeId arg3 ;
  UA_NodeId *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ServerAPIBase **)&jarg1; 
  arg2 = *(UA_Server **)&jarg2; 
  argp3 = *(UA_NodeId **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_NodeId");
    return ;
  }
  arg3 = *argp3; 
  ServerAPIBase::AddMonitoredItem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_ServerAPIBase_1AddObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  UA_Server *arg1 = (UA_Server *) 0 ;
  UA_NodeId arg2 ;
  char *arg3 = (char *) 0 ;
  UA_NodeId *argp2 ;
  UA_NodeId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(UA_Server **)&jarg1; 
  argp2 = *(UA_NodeId **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_NodeId");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = ServerAPIBase::AddObject(arg1,arg2,arg3);
  *(UA_NodeId **)&jresult = new UA_NodeId((const UA_NodeId &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_ServerAPIBase_1AddObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jlong jresult = 0 ;
  UA_Server *arg1 = (UA_Server *) 0 ;
  UA_NodeId arg2 ;
  UA_NodeId arg3 ;
  char *arg4 = (char *) 0 ;
  UA_NodeId *argp2 ;
  UA_NodeId *argp3 ;
  UA_NodeId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(UA_Server **)&jarg1; 
  argp2 = *(UA_NodeId **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_NodeId");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(UA_NodeId **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_NodeId");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = ServerAPIBase::AddObject(arg1,arg2,arg3,arg4);
  *(UA_NodeId **)&jresult = new UA_NodeId((const UA_NodeId &)result); 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_ServerAPIBase_1AddVariableNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jint jarg5, jint jarg6) {
  jlong jresult = 0 ;
  UA_Server *arg1 = (UA_Server *) 0 ;
  UA_NodeId arg2 ;
  UA_NodeId arg3 ;
  char *arg4 = (char *) 0 ;
  UA_Int32 arg5 ;
  UA_Int32 arg6 ;
  UA_NodeId *argp2 ;
  UA_NodeId *argp3 ;
  UA_NodeId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(UA_Server **)&jarg1; 
  argp2 = *(UA_NodeId **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_NodeId");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(UA_NodeId **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_NodeId");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (UA_Int32)jarg5; 
  arg6 = (UA_Int32)jarg6; 
  result = ServerAPIBase::AddVariableNode(arg1,arg2,arg3,arg4,arg5,arg6);
  *(UA_NodeId **)&jresult = new UA_NodeId((const UA_NodeId &)result); 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_ServerAPIBase_1ManuallyDefineIMM(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  UA_Server *arg1 = (UA_Server *) 0 ;
  UA_NodeId result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UA_Server **)&jarg1; 
  result = ServerAPIBase::ManuallyDefineIMM(arg1);
  *(UA_NodeId **)&jresult = new UA_NodeId((const UA_NodeId &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_ServerAPIBase_1ManuallyDefineRobot(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  UA_Server *arg1 = (UA_Server *) 0 ;
  UA_NodeId result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UA_Server **)&jarg1; 
  result = ServerAPIBase::ManuallyDefineRobot(arg1);
  *(UA_NodeId **)&jresult = new UA_NodeId((const UA_NodeId &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_ServerAPIBase_1WriteVariable_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  UA_Server *arg1 = (UA_Server *) 0 ;
  UA_NodeId *arg2 = (UA_NodeId *) 0 ;
  int arg3 ;
  UA_StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(UA_Server **)&jarg1; 
  arg2 = *(UA_NodeId **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (UA_StatusCode)ServerAPIBase::WriteVariable(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_ServerAPIBase_1WriteVariable_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  UA_Server *arg1 = (UA_Server *) 0 ;
  UA_NodeId *arg2 = (UA_NodeId *) 0 ;
  char *arg3 = (char *) 0 ;
  UA_StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(UA_Server **)&jarg1; 
  arg2 = *(UA_NodeId **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (UA_StatusCode)ServerAPIBase::WriteVariable(arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_ServerAPIBase_1WriteVariable_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jint jresult = 0 ;
  UA_Server *arg1 = (UA_Server *) 0 ;
  UA_NodeId *arg2 = (UA_NodeId *) 0 ;
  double arg3 ;
  UA_StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(UA_Server **)&jarg1; 
  arg2 = *(UA_NodeId **)&jarg2; 
  arg3 = (double)jarg3; 
  result = (UA_StatusCode)ServerAPIBase::WriteVariable(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_ServerAPIBase_1GetDataTypeNode(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  UA_Int32 arg1 ;
  UA_NodeId result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (UA_Int32)jarg1; 
  result = ServerAPIBase::GetDataTypeNode(arg1);
  *(UA_NodeId **)&jresult = new UA_NodeId((const UA_NodeId &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_ServerAPIBase_1AddMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  ServerAPIBase *arg1 = (ServerAPIBase *) 0 ;
  UA_Server *arg2 = (UA_Server *) 0 ;
  UA_NodeId arg3 ;
  UA_NodeId arg4 ;
  UA_Argument arg5 ;
  UA_Argument arg6 ;
  UA_MethodAttributes arg7 ;
  UA_NodeId *argp3 ;
  UA_NodeId *argp4 ;
  UA_Argument *argp5 ;
  UA_Argument *argp6 ;
  UA_MethodAttributes *argp7 ;
  UA_NodeId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(ServerAPIBase **)&jarg1; 
  arg2 = *(UA_Server **)&jarg2; 
  argp3 = *(UA_NodeId **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_NodeId");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(UA_NodeId **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_NodeId");
    return 0;
  }
  arg4 = *argp4; 
  argp5 = *(UA_Argument **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_Argument");
    return 0;
  }
  arg5 = *argp5; 
  argp6 = *(UA_Argument **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_Argument");
    return 0;
  }
  arg6 = *argp6; 
  argp7 = *(UA_MethodAttributes **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_MethodAttributes");
    return 0;
  }
  arg7 = *argp7; 
  result = ServerAPIBase::AddMethod(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(UA_NodeId **)&jresult = new UA_NodeId((const UA_NodeId &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_ServerAPIBase_1AddArrayMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jstring jarg7, jstring jarg8, jint jarg9, jint jarg10) {
  jlong jresult = 0 ;
  ServerAPIBase *arg1 = (ServerAPIBase *) 0 ;
  UA_Server *arg2 = (UA_Server *) 0 ;
  UA_NodeId arg3 ;
  UA_NodeId arg4 ;
  UA_Argument arg5 ;
  UA_MethodAttributes arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  int arg9 ;
  UA_UInt32 arg10 ;
  UA_NodeId *argp3 ;
  UA_NodeId *argp4 ;
  UA_Argument *argp5 ;
  UA_MethodAttributes *argp6 ;
  UA_NodeId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(ServerAPIBase **)&jarg1; 
  arg2 = *(UA_Server **)&jarg2; 
  argp3 = *(UA_NodeId **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_NodeId");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(UA_NodeId **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_NodeId");
    return 0;
  }
  arg4 = *argp4; 
  argp5 = *(UA_Argument **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_Argument");
    return 0;
  }
  arg5 = *argp5; 
  argp6 = *(UA_MethodAttributes **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_MethodAttributes");
    return 0;
  }
  arg6 = *argp6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = (int)jarg9; 
  arg10 = (UA_UInt32)jarg10; 
  result = ServerAPIBase::AddArrayMethod(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(UA_NodeId **)&jresult = new UA_NodeId((const UA_NodeId &)result); 
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_ServerAPIBase_1SetMethodOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UA_NodeId arg1 ;
  UA_String arg2 ;
  UA_NodeId *argp1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(UA_NodeId **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_NodeId");
    return ;
  }
  arg1 = *argp1; 
  {
    const char *nativeString = (jenv)->GetStringUTFChars(jarg2, 0);
    arg2 = UA_STRING((char *)nativeString);
  }
  ServerAPIBase::SetMethodOutput(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_ServerAPIBase_1monitored_1itemChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ServerAPIBase *arg1 = (ServerAPIBase *) 0 ;
  UA_NodeId *arg2 = (UA_NodeId *) 0 ;
  UA_Int32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ServerAPIBase **)&jarg1; 
  arg2 = *(UA_NodeId **)&jarg2; 
  arg3 = (UA_Int32)jarg3; 
  (arg1)->monitored_itemChanged((UA_NodeId const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_ServerAPIBase_1monitored_1itemChangedSwigExplicitServerAPIBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ServerAPIBase *arg1 = (ServerAPIBase *) 0 ;
  UA_NodeId *arg2 = (UA_NodeId *) 0 ;
  UA_Int32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ServerAPIBase **)&jarg1; 
  arg2 = *(UA_NodeId **)&jarg2; 
  arg3 = (UA_Int32)jarg3; 
  (arg1)->ServerAPIBase::monitored_itemChanged((UA_NodeId const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_ServerAPIBase_1methods_1callback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jstring jarg5, jlong jarg6, jobject jarg6_) {
  ServerAPIBase *arg1 = (ServerAPIBase *) 0 ;
  UA_NodeId *arg2 = (UA_NodeId *) 0 ;
  UA_NodeId *arg3 = (UA_NodeId *) 0 ;
  UA_String arg4 ;
  UA_String arg5 ;
  ServerAPIBase *arg6 = (ServerAPIBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg6_;
  arg1 = *(ServerAPIBase **)&jarg1; 
  arg2 = *(UA_NodeId **)&jarg2; 
  arg3 = *(UA_NodeId **)&jarg3; 
  {
    const char *nativeString = (jenv)->GetStringUTFChars(jarg4, 0);
    arg4 = UA_STRING((char *)nativeString);
  }
  {
    const char *nativeString = (jenv)->GetStringUTFChars(jarg5, 0);
    arg5 = UA_STRING((char *)nativeString);
  }
  arg6 = *(ServerAPIBase **)&jarg6; 
  (arg1)->methods_callback((UA_NodeId const *)arg2,(UA_NodeId const *)arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_ServerAPIBase_1methods_1callbackSwigExplicitServerAPIBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jstring jarg5, jlong jarg6, jobject jarg6_) {
  ServerAPIBase *arg1 = (ServerAPIBase *) 0 ;
  UA_NodeId *arg2 = (UA_NodeId *) 0 ;
  UA_NodeId *arg3 = (UA_NodeId *) 0 ;
  UA_String arg4 ;
  UA_String arg5 ;
  ServerAPIBase *arg6 = (ServerAPIBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg6_;
  arg1 = *(ServerAPIBase **)&jarg1; 
  arg2 = *(UA_NodeId **)&jarg2; 
  arg3 = *(UA_NodeId **)&jarg3; 
  {
    const char *nativeString = (jenv)->GetStringUTFChars(jarg4, 0);
    arg4 = UA_STRING((char *)nativeString);
  }
  {
    const char *nativeString = (jenv)->GetStringUTFChars(jarg5, 0);
    arg5 = UA_STRING((char *)nativeString);
  }
  arg6 = *(ServerAPIBase **)&jarg6; 
  (arg1)->ServerAPIBase::methods_callback((UA_NodeId const *)arg2,(UA_NodeId const *)arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_delete_1ServerAPIBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ServerAPIBase *arg1 = (ServerAPIBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ServerAPIBase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_new_1ServerAPIBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ServerAPIBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ServerAPIBase *)new SwigDirector_ServerAPIBase(jenv);
  *(ServerAPIBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_ServerAPIBase_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ServerAPIBase *obj = *((ServerAPIBase **)&objarg);
  (void)jcls;
  SwigDirector_ServerAPIBase *director = static_cast<SwigDirector_ServerAPIBase *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_ServerAPIBase_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ServerAPIBase *obj = *((ServerAPIBase **)&objarg);
  SwigDirector_ServerAPIBase *director = dynamic_cast<SwigDirector_ServerAPIBase *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1methodInputs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  ClientAPIBase *arg1 = (ClientAPIBase *) 0 ;
  UA_Int32 *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ClientAPIBase **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    UA_Int32 *b = (UA_Int32 *) arg1->methodInputs;
    for (ii = 0; ii < (size_t)10; ii++) b[ii] = *((UA_Int32 *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1methodInputs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  ClientAPIBase *arg1 = (ClientAPIBase *) 0 ;
  UA_Int32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ClientAPIBase **)&jarg1; 
  result = (UA_Int32 *)(UA_Int32 *) ((arg1)->methodInputs);
  jresult = SWIG_JavaArrayOutInt(jenv, (int *)result, 10); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1running_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ClientAPIBase *arg1 = (ClientAPIBase *) 0 ;
  UA_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ClientAPIBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->running = arg2;
}


SWIGEXPORT jboolean JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1running_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ClientAPIBase *arg1 = (ClientAPIBase *) 0 ;
  UA_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ClientAPIBase **)&jarg1; 
  result = (UA_Boolean) ((arg1)->running);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1Get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ClientAPIBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ClientAPIBase *)ClientAPIBase::Get();
  *(ClientAPIBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1stopHandler(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  ClientAPIBase::stopHandler(arg1);
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1inactivityCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UA_Client *arg1 = (UA_Client *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UA_Client **)&jarg1; 
  ClientAPIBase::inactivityCallback(arg1);
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1InitClient(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UA_Client *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UA_Client *)ClientAPIBase::InitClient();
  *(UA_Client **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1ClientConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jint jresult = 0 ;
  ClientAPIBase *arg1 = (ClientAPIBase *) 0 ;
  UA_Client *arg2 = (UA_Client *) 0 ;
  char *arg3 = (char *) 0 ;
  UA_StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ClientAPIBase **)&jarg1; 
  arg2 = *(UA_Client **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (UA_StatusCode)ClientAPIBase::ClientConnect(arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1NodeIter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  UA_NodeId arg1 ;
  UA_Client *arg2 = (UA_Client *) 0 ;
  char *arg3 = (char *) 0 ;
  UA_NodeId *argp1 ;
  UA_NodeId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(UA_NodeId **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_NodeId");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(UA_Client **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = ClientAPIBase::NodeIter(arg1,arg2,arg3);
  *(UA_NodeId **)&jresult = new UA_NodeId((const UA_NodeId &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1GetNodeByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  UA_Client *arg1 = (UA_Client *) 0 ;
  char *arg2 = (char *) 0 ;
  UA_NodeId result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UA_Client **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = ClientAPIBase::GetNodeByName(arg1,arg2);
  *(UA_NodeId **)&jresult = new UA_NodeId((const UA_NodeId &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1ClientSubtoNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  ClientAPIBase *arg1 = (ClientAPIBase *) 0 ;
  UA_Client *arg2 = (UA_Client *) 0 ;
  UA_NodeId arg3 ;
  UA_NodeId *argp3 ;
  UA_UInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ClientAPIBase **)&jarg1; 
  arg2 = *(UA_Client **)&jarg2; 
  argp3 = *(UA_NodeId **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_NodeId");
    return 0;
  }
  arg3 = *argp3; 
  result = (UA_UInt32)ClientAPIBase::ClientSubtoNode(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1ClientSubtoNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  ClientAPIBase *arg1 = (ClientAPIBase *) 0 ;
  char *arg2 = (char *) 0 ;
  UA_NodeId arg3 ;
  UA_NodeId *argp3 ;
  UA_UInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ClientAPIBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  argp3 = *(UA_NodeId **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_NodeId");
    return 0;
  }
  arg3 = *argp3; 
  result = (UA_UInt32)ClientAPIBase::ClientSubtoNode(arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1SetGetVariant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UA_Variant *arg1 = (UA_Variant *) 0 ;
  UA_Variant result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Variant **)&jarg1; 
  result = ClientAPIBase::SetGetVariant(arg1);
  *(UA_Variant **)&jresult = new UA_Variant((const UA_Variant &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1ClientRemoveSub(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  UA_Client *arg1 = (UA_Client *) 0 ;
  UA_UInt32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UA_Client **)&jarg1; 
  arg2 = (UA_UInt32)jarg2; 
  ClientAPIBase::ClientRemoveSub(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1ClientReadValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  UA_Client *arg1 = (UA_Client *) 0 ;
  UA_NodeId arg2 ;
  UA_NodeId *argp2 ;
  UA_Variant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(UA_Client **)&jarg1; 
  argp2 = *(UA_NodeId **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_NodeId");
    return 0;
  }
  arg2 = *argp2; 
  result = (UA_Variant *)ClientAPIBase::ClientReadValue(arg1,arg2);
  *(UA_Variant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1ClientReadIntValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  UA_Client *arg1 = (UA_Client *) 0 ;
  UA_NodeId arg2 ;
  UA_NodeId *argp2 ;
  UA_Int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(UA_Client **)&jarg1; 
  argp2 = *(UA_NodeId **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_NodeId");
    return 0;
  }
  arg2 = *argp2; 
  result = (UA_Int32)ClientAPIBase::ClientReadIntValue(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1ClientWriteValue(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  UA_NodeId arg2 ;
  UA_Int32 arg3 ;
  UA_NodeId *argp2 ;
  UA_StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(UA_NodeId **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_NodeId");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (UA_Int32)jarg3; 
  result = (UA_StatusCode)ClientAPIBase::ClientWriteValue(arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1GetMethodOutput(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ClientAPIBase::GetMethodOutput();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1CallMethod(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  UA_NodeId arg2 ;
  UA_NodeId arg3 ;
  char *arg4 = (char *) 0 ;
  UA_NodeId const *argp2 ;
  UA_NodeId const *argp3 ;
  UA_String result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(UA_NodeId **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_NodeId const");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(UA_NodeId **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_NodeId const");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = ClientAPIBase::CallMethod(arg1,arg2,arg3,arg4);
  {
    char* $2 = (char*)UA_malloc(sizeof(char)*(&result)->length + 1);
    memcpy($2, (&result)->data, (&result)->length);
    $2[(&result)->length] = '\0';
    //strcpy($2, "123456789"); // with the null terminator the string adds up to 10 bytes
    jresult = (jenv)->NewStringUTF($2);	
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1CallArrayMethod(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jintArray jarg4, jint jarg5, jlong jarg6, jobject jarg6_) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  UA_NodeId arg2 ;
  UA_NodeId arg3 ;
  UA_Int32 *arg4 ;
  UA_Int32 arg5 ;
  UA_Variant *arg6 = (UA_Variant *) 0 ;
  UA_NodeId const *argp2 ;
  UA_NodeId const *argp3 ;
  jint *jarr4 ;
  UA_String result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg6_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(UA_NodeId **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_NodeId const");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(UA_NodeId **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_NodeId const");
    return 0;
  }
  arg3 = *argp3; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr4, (int **)&arg4, jarg4)) return 0; 
  arg5 = (UA_Int32)jarg5; 
  arg6 = *(UA_Variant **)&jarg6; 
  result = ClientAPIBase::CallArrayMethod(arg1,arg2,arg3,arg4,arg5,arg6);
  {
    char* $2 = (char*)UA_malloc(sizeof(char)*(&result)->length + 1);
    memcpy($2, (&result)->data, (&result)->length);
    $2[(&result)->length] = '\0';
    //strcpy($2, "123456789"); // with the null terminator the string adds up to 10 bytes
    jresult = (jenv)->NewStringUTF($2);	
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr4, (int *)arg4, jarg4); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  delete [] arg4; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1monitored_1itemChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ClientAPIBase *arg1 = (ClientAPIBase *) 0 ;
  UA_NodeId arg2 ;
  UA_Int32 arg3 ;
  UA_NodeId *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ClientAPIBase **)&jarg1; 
  argp2 = *(UA_NodeId **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_NodeId");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (UA_Int32)jarg3; 
  (arg1)->monitored_itemChanged(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1monitored_1itemChangedSwigExplicitClientAPIBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ClientAPIBase *arg1 = (ClientAPIBase *) 0 ;
  UA_NodeId arg2 ;
  UA_Int32 arg3 ;
  UA_NodeId *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ClientAPIBase **)&jarg1; 
  argp2 = *(UA_NodeId **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_NodeId");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (UA_Int32)jarg3; 
  (arg1)->ClientAPIBase::monitored_itemChanged(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1client_1connected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  ClientAPIBase *arg1 = (ClientAPIBase *) 0 ;
  ClientAPIBase *arg2 = (ClientAPIBase *) 0 ;
  UA_Client *arg3 = (UA_Client *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ClientAPIBase **)&jarg1; 
  arg2 = *(ClientAPIBase **)&jarg2; 
  arg3 = *(UA_Client **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->client_connected(arg2,arg3,arg4);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1client_1connectedSwigExplicitClientAPIBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  ClientAPIBase *arg1 = (ClientAPIBase *) 0 ;
  ClientAPIBase *arg2 = (ClientAPIBase *) 0 ;
  UA_Client *arg3 = (UA_Client *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ClientAPIBase **)&jarg1; 
  arg2 = *(ClientAPIBase **)&jarg2; 
  arg3 = *(UA_Client **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->ClientAPIBase::client_connected(arg2,arg3,arg4);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1methods_1callback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jstring jarg5, jlong jarg6, jobject jarg6_) {
  ClientAPIBase *arg1 = (ClientAPIBase *) 0 ;
  UA_NodeId arg2 ;
  UA_NodeId arg3 ;
  UA_String arg4 ;
  UA_String arg5 ;
  ClientAPIBase *arg6 = (ClientAPIBase *) 0 ;
  UA_NodeId const *argp2 ;
  UA_NodeId const *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg6_;
  arg1 = *(ClientAPIBase **)&jarg1; 
  argp2 = *(UA_NodeId **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_NodeId const");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(UA_NodeId **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_NodeId const");
    return ;
  }
  arg3 = *argp3; 
  {
    const char *nativeString = (jenv)->GetStringUTFChars(jarg4, 0);
    arg4 = UA_STRING((char *)nativeString);
  }
  {
    const char *nativeString = (jenv)->GetStringUTFChars(jarg5, 0);
    arg5 = UA_STRING((char *)nativeString);
  }
  arg6 = *(ClientAPIBase **)&jarg6; 
  (arg1)->methods_callback(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1methods_1callbackSwigExplicitClientAPIBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jstring jarg5, jlong jarg6, jobject jarg6_) {
  ClientAPIBase *arg1 = (ClientAPIBase *) 0 ;
  UA_NodeId arg2 ;
  UA_NodeId arg3 ;
  UA_String arg4 ;
  UA_String arg5 ;
  ClientAPIBase *arg6 = (ClientAPIBase *) 0 ;
  UA_NodeId const *argp2 ;
  UA_NodeId const *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg6_;
  arg1 = *(ClientAPIBase **)&jarg1; 
  argp2 = *(UA_NodeId **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_NodeId const");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(UA_NodeId **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UA_NodeId const");
    return ;
  }
  arg3 = *argp3; 
  {
    const char *nativeString = (jenv)->GetStringUTFChars(jarg4, 0);
    arg4 = UA_STRING((char *)nativeString);
  }
  {
    const char *nativeString = (jenv)->GetStringUTFChars(jarg5, 0);
    arg5 = UA_STRING((char *)nativeString);
  }
  arg6 = *(ClientAPIBase **)&jarg6; 
  (arg1)->ClientAPIBase::methods_callback(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_delete_1ClientAPIBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ClientAPIBase *arg1 = (ClientAPIBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientAPIBase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_new_1ClientAPIBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ClientAPIBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ClientAPIBase *)new SwigDirector_ClientAPIBase(jenv);
  *(ClientAPIBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ClientAPIBase *obj = *((ClientAPIBase **)&objarg);
  (void)jcls;
  SwigDirector_ClientAPIBase *director = static_cast<SwigDirector_ClientAPIBase *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_ClientAPIBase_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ClientAPIBase *obj = *((ClientAPIBase **)&objarg);
  SwigDirector_ClientAPIBase *director = dynamic_cast<SwigDirector_ClientAPIBase *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1NODEIDTYPE_1NUMERIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  UA_NodeIdType result;
  
  (void)jenv;
  (void)jcls;
  result = (UA_NodeIdType)UA_NODEIDTYPE_NUMERIC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1NODEIDTYPE_1STRING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  UA_NodeIdType result;
  
  (void)jenv;
  (void)jcls;
  result = (UA_NodeIdType)UA_NODEIDTYPE_STRING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1NODEIDTYPE_1GUID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  UA_NodeIdType result;
  
  (void)jenv;
  (void)jcls;
  result = (UA_NodeIdType)UA_NODEIDTYPE_GUID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1NODEIDTYPE_1BYTESTRING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  UA_NodeIdType result;
  
  (void)jenv;
  (void)jcls;
  result = (UA_NodeIdType)UA_NODEIDTYPE_BYTESTRING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_Identifier_1numeric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Identifier *arg1 = (Identifier *) 0 ;
  UA_UInt32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Identifier **)&jarg1; 
  arg2 = (UA_UInt32)jarg2; 
  if (arg1) (arg1)->numeric = arg2;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_Identifier_1numeric_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Identifier *arg1 = (Identifier *) 0 ;
  UA_UInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Identifier **)&jarg1; 
  result = (UA_UInt32) ((arg1)->numeric);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_Identifier_1string_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Identifier *arg1 = (Identifier *) 0 ;
  UA_String arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Identifier **)&jarg1; 
  {
    const char *nativeString = (jenv)->GetStringUTFChars(jarg2, 0);
    arg2 = UA_STRING((char *)nativeString);
  }
  if (arg1) (arg1)->string = arg2;
}


SWIGEXPORT jstring JNICALL Java_open62Wrap_open62541JNI_Identifier_1string_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Identifier *arg1 = (Identifier *) 0 ;
  UA_String result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Identifier **)&jarg1; 
  result =  ((arg1)->string);
  {
    char* $2 = (char*)UA_malloc(sizeof(char)*(&result)->length + 1);
    memcpy($2, (&result)->data, (&result)->length);
    $2[(&result)->length] = '\0';
    //strcpy($2, "123456789"); // with the null terminator the string adds up to 10 bytes
    jresult = (jenv)->NewStringUTF($2);	
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_Identifier_1guid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Identifier *arg1 = (Identifier *) 0 ;
  UA_Guid *arg2 = (UA_Guid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Identifier **)&jarg1; 
  arg2 = *(UA_Guid **)&jarg2; 
  if (arg1) (arg1)->guid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_Identifier_1guid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Identifier *arg1 = (Identifier *) 0 ;
  UA_Guid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Identifier **)&jarg1; 
  result = (UA_Guid *)& ((arg1)->guid);
  *(UA_Guid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_Identifier_1byteString_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Identifier *arg1 = (Identifier *) 0 ;
  UA_ByteString arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Identifier **)&jarg1; 
  {
    const char *nativeString = (jenv)->GetStringUTFChars(jarg2, 0);
    arg2 = UA_STRING((char *)nativeString);
  }
  if (arg1) (arg1)->byteString = arg2;
}


SWIGEXPORT jstring JNICALL Java_open62Wrap_open62541JNI_Identifier_1byteString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Identifier *arg1 = (Identifier *) 0 ;
  UA_ByteString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Identifier **)&jarg1; 
  result =  ((arg1)->byteString);
  {
    char* $2 = (char*)UA_malloc(sizeof(char)*(&result)->length + 1);
    memcpy($2, (&result)->data, (&result)->length);
    $2[(&result)->length] = '\0';
    //strcpy($2, "123456789"); // with the null terminator the string adds up to 10 bytes
    jresult = (jenv)->NewStringUTF($2);	
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_new_1Identifier(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Identifier *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Identifier *)new Identifier();
  *(Identifier **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_delete_1Identifier(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Identifier *arg1 = (Identifier *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Identifier **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1NodeId_1namespaceIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UA_NodeId *arg1 = (UA_NodeId *) 0 ;
  UA_UInt16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_NodeId **)&jarg1; 
  arg2 = (UA_UInt16)jarg2; 
  if (arg1) (arg1)->namespaceIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1NodeId_1namespaceIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UA_NodeId *arg1 = (UA_NodeId *) 0 ;
  UA_UInt16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_NodeId **)&jarg1; 
  result = (UA_UInt16) ((arg1)->namespaceIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1NodeId_1identifierType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UA_NodeId *arg1 = (UA_NodeId *) 0 ;
  enum UA_NodeIdType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_NodeId **)&jarg1; 
  arg2 = (enum UA_NodeIdType)jarg2; 
  if (arg1) (arg1)->identifierType = arg2;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1NodeId_1identifierType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UA_NodeId *arg1 = (UA_NodeId *) 0 ;
  enum UA_NodeIdType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_NodeId **)&jarg1; 
  result = (enum UA_NodeIdType) ((arg1)->identifierType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1NodeId_1identifier_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  UA_NodeId *arg1 = (UA_NodeId *) 0 ;
  Identifier *arg2 = (Identifier *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(UA_NodeId **)&jarg1; 
  arg2 = *(Identifier **)&jarg2; 
  {
    if (arg2) (arg1->identifier).numeric = (*arg2).numeric;
    if (arg2) (arg1->identifier).byteString = (*arg2).byteString;
    if (arg2) (arg1->identifier).guid = (*arg2).guid;
    if (arg2) (arg1->identifier).string = (*arg2).string;
  }
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_UA_1NodeId_1identifier_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UA_NodeId *arg1 = (UA_NodeId *) 0 ;
  Identifier *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_NodeId **)&jarg1; 
  result = (Identifier *)& ((arg1)->identifier);
  *(Identifier **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_new_1UA_1NodeId(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UA_NodeId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UA_NodeId *)new UA_NodeId();
  *(UA_NodeId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_delete_1UA_1NodeId(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UA_NodeId *arg1 = (UA_NodeId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UA_NodeId **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1Argument_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UA_Argument *arg1 = (UA_Argument *) 0 ;
  UA_String arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Argument **)&jarg1; 
  {
    const char *nativeString = (jenv)->GetStringUTFChars(jarg2, 0);
    arg2 = UA_STRING((char *)nativeString);
  }
  if (arg1) (arg1)->name = arg2;
}


SWIGEXPORT jstring JNICALL Java_open62Wrap_open62541JNI_UA_1Argument_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UA_Argument *arg1 = (UA_Argument *) 0 ;
  UA_String result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Argument **)&jarg1; 
  result =  ((arg1)->name);
  {
    char* $2 = (char*)UA_malloc(sizeof(char)*(&result)->length + 1);
    memcpy($2, (&result)->data, (&result)->length);
    $2[(&result)->length] = '\0';
    //strcpy($2, "123456789"); // with the null terminator the string adds up to 10 bytes
    jresult = (jenv)->NewStringUTF($2);	
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1Argument_1dataType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  UA_Argument *arg1 = (UA_Argument *) 0 ;
  UA_NodeId *arg2 = (UA_NodeId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(UA_Argument **)&jarg1; 
  arg2 = *(UA_NodeId **)&jarg2; 
  if (arg1) (arg1)->dataType = *arg2;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_UA_1Argument_1dataType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UA_Argument *arg1 = (UA_Argument *) 0 ;
  UA_NodeId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Argument **)&jarg1; 
  result = (UA_NodeId *)& ((arg1)->dataType);
  *(UA_NodeId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1Argument_1valueRank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UA_Argument *arg1 = (UA_Argument *) 0 ;
  UA_Int32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Argument **)&jarg1; 
  arg2 = (UA_Int32)jarg2; 
  if (arg1) (arg1)->valueRank = arg2;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1Argument_1valueRank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UA_Argument *arg1 = (UA_Argument *) 0 ;
  UA_Int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Argument **)&jarg1; 
  result = (UA_Int32) ((arg1)->valueRank);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1Argument_1arrayDimensionsSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  UA_Argument *arg1 = (UA_Argument *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Argument **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->arrayDimensionsSize = arg2;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_UA_1Argument_1arrayDimensionsSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UA_Argument *arg1 = (UA_Argument *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Argument **)&jarg1; 
  result =  ((arg1)->arrayDimensionsSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1Argument_1arrayDimensions_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  UA_Argument *arg1 = (UA_Argument *) 0 ;
  UA_UInt32 *arg2 = (UA_UInt32 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Argument **)&jarg1; 
  arg2 = *(UA_UInt32 **)&jarg2; 
  if (arg1) (arg1)->arrayDimensions = arg2;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_UA_1Argument_1arrayDimensions_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UA_Argument *arg1 = (UA_Argument *) 0 ;
  UA_UInt32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Argument **)&jarg1; 
  result = (UA_UInt32 *) ((arg1)->arrayDimensions);
  *(UA_UInt32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1Argument_1description_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  UA_Argument *arg1 = (UA_Argument *) 0 ;
  UA_LocalizedText *arg2 = (UA_LocalizedText *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(UA_Argument **)&jarg1; 
  arg2 = *(UA_LocalizedText **)&jarg2; 
  if (arg1) (arg1)->description = *arg2;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_UA_1Argument_1description_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UA_Argument *arg1 = (UA_Argument *) 0 ;
  UA_LocalizedText *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Argument **)&jarg1; 
  result = (UA_LocalizedText *)& ((arg1)->description);
  *(UA_LocalizedText **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_new_1UA_1Argument(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UA_Argument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UA_Argument *)new UA_Argument();
  *(UA_Argument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_delete_1UA_1Argument(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UA_Argument *arg1 = (UA_Argument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UA_Argument **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1LocalizedText_1locale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UA_LocalizedText *arg1 = (UA_LocalizedText *) 0 ;
  UA_String arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_LocalizedText **)&jarg1; 
  {
    const char *nativeString = (jenv)->GetStringUTFChars(jarg2, 0);
    arg2 = UA_STRING((char *)nativeString);
  }
  if (arg1) (arg1)->locale = arg2;
}


SWIGEXPORT jstring JNICALL Java_open62Wrap_open62541JNI_UA_1LocalizedText_1locale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UA_LocalizedText *arg1 = (UA_LocalizedText *) 0 ;
  UA_String result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_LocalizedText **)&jarg1; 
  result =  ((arg1)->locale);
  {
    char* $2 = (char*)UA_malloc(sizeof(char)*(&result)->length + 1);
    memcpy($2, (&result)->data, (&result)->length);
    $2[(&result)->length] = '\0';
    //strcpy($2, "123456789"); // with the null terminator the string adds up to 10 bytes
    jresult = (jenv)->NewStringUTF($2);	
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1LocalizedText_1text_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UA_LocalizedText *arg1 = (UA_LocalizedText *) 0 ;
  UA_String arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_LocalizedText **)&jarg1; 
  {
    const char *nativeString = (jenv)->GetStringUTFChars(jarg2, 0);
    arg2 = UA_STRING((char *)nativeString);
  }
  if (arg1) (arg1)->text = arg2;
}


SWIGEXPORT jstring JNICALL Java_open62Wrap_open62541JNI_UA_1LocalizedText_1text_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UA_LocalizedText *arg1 = (UA_LocalizedText *) 0 ;
  UA_String result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_LocalizedText **)&jarg1; 
  result =  ((arg1)->text);
  {
    char* $2 = (char*)UA_malloc(sizeof(char)*(&result)->length + 1);
    memcpy($2, (&result)->data, (&result)->length);
    $2[(&result)->length] = '\0';
    //strcpy($2, "123456789"); // with the null terminator the string adds up to 10 bytes
    jresult = (jenv)->NewStringUTF($2);	
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_new_1UA_1LocalizedText(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UA_LocalizedText *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UA_LocalizedText *)new UA_LocalizedText();
  *(UA_LocalizedText **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_delete_1UA_1LocalizedText(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UA_LocalizedText *arg1 = (UA_LocalizedText *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UA_LocalizedText **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1MethodAttributes_1specifiedAttributes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UA_MethodAttributes *arg1 = (UA_MethodAttributes *) 0 ;
  UA_UInt32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_MethodAttributes **)&jarg1; 
  arg2 = (UA_UInt32)jarg2; 
  if (arg1) (arg1)->specifiedAttributes = arg2;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1MethodAttributes_1specifiedAttributes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UA_MethodAttributes *arg1 = (UA_MethodAttributes *) 0 ;
  UA_UInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_MethodAttributes **)&jarg1; 
  result = (UA_UInt32) ((arg1)->specifiedAttributes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1MethodAttributes_1displayName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  UA_MethodAttributes *arg1 = (UA_MethodAttributes *) 0 ;
  UA_LocalizedText *arg2 = (UA_LocalizedText *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(UA_MethodAttributes **)&jarg1; 
  arg2 = *(UA_LocalizedText **)&jarg2; 
  if (arg1) (arg1)->displayName = *arg2;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_UA_1MethodAttributes_1displayName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UA_MethodAttributes *arg1 = (UA_MethodAttributes *) 0 ;
  UA_LocalizedText *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_MethodAttributes **)&jarg1; 
  result = (UA_LocalizedText *)& ((arg1)->displayName);
  *(UA_LocalizedText **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1MethodAttributes_1description_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  UA_MethodAttributes *arg1 = (UA_MethodAttributes *) 0 ;
  UA_LocalizedText *arg2 = (UA_LocalizedText *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(UA_MethodAttributes **)&jarg1; 
  arg2 = *(UA_LocalizedText **)&jarg2; 
  if (arg1) (arg1)->description = *arg2;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_UA_1MethodAttributes_1description_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UA_MethodAttributes *arg1 = (UA_MethodAttributes *) 0 ;
  UA_LocalizedText *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_MethodAttributes **)&jarg1; 
  result = (UA_LocalizedText *)& ((arg1)->description);
  *(UA_LocalizedText **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1MethodAttributes_1writeMask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UA_MethodAttributes *arg1 = (UA_MethodAttributes *) 0 ;
  UA_UInt32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_MethodAttributes **)&jarg1; 
  arg2 = (UA_UInt32)jarg2; 
  if (arg1) (arg1)->writeMask = arg2;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1MethodAttributes_1writeMask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UA_MethodAttributes *arg1 = (UA_MethodAttributes *) 0 ;
  UA_UInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_MethodAttributes **)&jarg1; 
  result = (UA_UInt32) ((arg1)->writeMask);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1MethodAttributes_1userWriteMask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UA_MethodAttributes *arg1 = (UA_MethodAttributes *) 0 ;
  UA_UInt32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_MethodAttributes **)&jarg1; 
  arg2 = (UA_UInt32)jarg2; 
  if (arg1) (arg1)->userWriteMask = arg2;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1MethodAttributes_1userWriteMask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UA_MethodAttributes *arg1 = (UA_MethodAttributes *) 0 ;
  UA_UInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_MethodAttributes **)&jarg1; 
  result = (UA_UInt32) ((arg1)->userWriteMask);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1MethodAttributes_1executable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  UA_MethodAttributes *arg1 = (UA_MethodAttributes *) 0 ;
  UA_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_MethodAttributes **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->executable = arg2;
}


SWIGEXPORT jboolean JNICALL Java_open62Wrap_open62541JNI_UA_1MethodAttributes_1executable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  UA_MethodAttributes *arg1 = (UA_MethodAttributes *) 0 ;
  UA_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_MethodAttributes **)&jarg1; 
  result = (UA_Boolean) ((arg1)->executable);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1MethodAttributes_1userExecutable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  UA_MethodAttributes *arg1 = (UA_MethodAttributes *) 0 ;
  UA_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_MethodAttributes **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->userExecutable = arg2;
}


SWIGEXPORT jboolean JNICALL Java_open62Wrap_open62541JNI_UA_1MethodAttributes_1userExecutable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  UA_MethodAttributes *arg1 = (UA_MethodAttributes *) 0 ;
  UA_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_MethodAttributes **)&jarg1; 
  result = (UA_Boolean) ((arg1)->userExecutable);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_new_1UA_1MethodAttributes(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UA_MethodAttributes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UA_MethodAttributes *)new UA_MethodAttributes();
  *(UA_MethodAttributes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_delete_1UA_1MethodAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UA_MethodAttributes *arg1 = (UA_MethodAttributes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UA_MethodAttributes **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1ACCESSLEVELMASK_1READ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((0x01u << 0u));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1ACCESSLEVELMASK_1WRITE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((0x01u << 1u));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1ACCESSLEVELMASK_1HISTORYREAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((0x01u << 2u));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1ACCESSLEVELMASK_1HISTORYWRITE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((0x01u << 3u));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1ACCESSLEVELMASK_1SEMANTICCHANGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((0x01u << 4u));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1ACCESSLEVELMASK_1STATUSWRITE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((0x01u << 5u));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1ACCESSLEVELMASK_1TIMESTAMPWRITE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((0x01u << 6u));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1TYPES_1BOOLEAN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1TYPES_1SBYTE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1TYPES_1BYTE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1TYPES_1INT16_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1TYPES_1UINT16_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1TYPES_1INT32_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1TYPES_1UINT32_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1TYPES_1INT64_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1TYPES_1UINT64_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1TYPES_1FLOAT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(9);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1TYPES_1DOUBLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(10);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1TYPES_1STRING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(11);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1TYPES_1DATETIME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(12);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1TYPES_1GUID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(13);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1TYPES_1BYTESTRING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(14);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1TYPES_1XMLELEMENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(15);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1TYPES_1NODEID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(16);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1TYPES_1EXPANDEDNODEID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(17);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1TYPES_1STATUSCODE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(18);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1TYPES_1QUALIFIEDNAME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(19);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1TYPES_1LOCALIZEDTEXT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(20);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1TYPES_1EXTENSIONOBJECT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(21);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1TYPES_1DATAVALUE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(22);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1TYPES_1VARIANT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(23);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1TYPES_1DIAGNOSTICINFO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(24);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1TYPES_1KEYVALUEPAIR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(25);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1NS0ID_1MODELLINGRULE_1MANDATORY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(78);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1NS0ID_1MODELLINGRULE_1MANDATORYSHARED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(79);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1NS0ID_1MODELLINGRULE_1OPTIONAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(80);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1NS0ID_1MODELLINGRULE_1EXPOSESITSARRAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(83);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1NS0ID_1ROOTFOLDER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(84);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1NS0ID_1OBJECTSFOLDER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(85);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1NS0ID_1TYPESFOLDER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(86);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1NS0ID_1VIEWSFOLDER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(87);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1NS0ID_1OBJECTTYPESFOLDER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(88);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1NS0ID_1VARIABLETYPESFOLDER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(89);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1NS0ID_1DATATYPESFOLDER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(90);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1NS0ID_1REFERENCETYPESFOLDER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(91);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1NS0ID_1XMLSCHEMA_1TYPESYSTEM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(92);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1NS0ID_1OPCBINARYSCHEMA_1TYPESYSTEM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(93);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1VALUERANK_1SCALAR_1OR_1ONE_1DIMENSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1VALUERANK_1ANY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1VALUERANK_1SCALAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1VALUERANK_1ONE_1OR_1MORE_1DIMENSIONS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1VALUERANK_1ONE_1DIMENSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1VALUERANK_1TWO_1DIMENSIONS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1VALUERANK_1THREE_1DIMENSIONS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_UA_1NODEID_1NUMERIC(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  UA_UInt16 arg1 ;
  UA_UInt32 arg2 ;
  UA_NodeId result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (UA_UInt16)jarg1; 
  arg2 = (UA_UInt32)jarg2; 
  result = UA_NODEID_NUMERIC(arg1,arg2);
  *(UA_NodeId **)&jresult = new UA_NodeId((const UA_NodeId &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_UA_1NODEID_1STRING(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  UA_UInt16 arg1 ;
  char *arg2 = (char *) 0 ;
  UA_NodeId result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (UA_UInt16)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = UA_NODEID_STRING(arg1,arg2);
  *(UA_NodeId **)&jresult = new UA_NodeId((const UA_NodeId &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1Variant_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  UA_Variant *arg1 = (UA_Variant *) 0 ;
  UA_DataType *arg2 = (UA_DataType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(UA_Variant **)&jarg1; 
  arg2 = *(UA_DataType **)&jarg2; 
  if (arg1) (arg1)->type = (UA_DataType const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_UA_1Variant_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UA_Variant *arg1 = (UA_Variant *) 0 ;
  UA_DataType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Variant **)&jarg1; 
  result = (UA_DataType *) ((arg1)->type);
  *(UA_DataType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1Variant_1storageType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UA_Variant *arg1 = (UA_Variant *) 0 ;
  UA_VariantStorageType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Variant **)&jarg1; 
  arg2 = (UA_VariantStorageType)jarg2; 
  if (arg1) (arg1)->storageType = arg2;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1Variant_1storageType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UA_Variant *arg1 = (UA_Variant *) 0 ;
  UA_VariantStorageType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Variant **)&jarg1; 
  result = (UA_VariantStorageType) ((arg1)->storageType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1Variant_1arrayLength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  UA_Variant *arg1 = (UA_Variant *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Variant **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->arrayLength = arg2;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_UA_1Variant_1arrayLength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UA_Variant *arg1 = (UA_Variant *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Variant **)&jarg1; 
  result =  ((arg1)->arrayLength);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1Variant_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  UA_Variant *arg1 = (UA_Variant *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Variant **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_UA_1Variant_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UA_Variant *arg1 = (UA_Variant *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Variant **)&jarg1; 
  result = (void *) ((arg1)->data);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1Variant_1arrayDimensionsSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  UA_Variant *arg1 = (UA_Variant *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Variant **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->arrayDimensionsSize = arg2;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_UA_1Variant_1arrayDimensionsSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UA_Variant *arg1 = (UA_Variant *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Variant **)&jarg1; 
  result =  ((arg1)->arrayDimensionsSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1Variant_1arrayDimensions_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  UA_Variant *arg1 = (UA_Variant *) 0 ;
  UA_UInt32 *arg2 = (UA_UInt32 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Variant **)&jarg1; 
  arg2 = *(UA_UInt32 **)&jarg2; 
  if (arg1) (arg1)->arrayDimensions = arg2;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_UA_1Variant_1arrayDimensions_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UA_Variant *arg1 = (UA_Variant *) 0 ;
  UA_UInt32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Variant **)&jarg1; 
  result = (UA_UInt32 *) ((arg1)->arrayDimensions);
  *(UA_UInt32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_new_1UA_1Variant(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UA_Variant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UA_Variant *)new UA_Variant();
  *(UA_Variant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_delete_1UA_1Variant(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UA_Variant *arg1 = (UA_Variant *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UA_Variant **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1DataType_1typeId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  UA_DataType *arg1 = (UA_DataType *) 0 ;
  UA_NodeId *arg2 = (UA_NodeId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(UA_DataType **)&jarg1; 
  arg2 = *(UA_NodeId **)&jarg2; 
  if (arg1) (arg1)->typeId = *arg2;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_UA_1DataType_1typeId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UA_DataType *arg1 = (UA_DataType *) 0 ;
  UA_NodeId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_DataType **)&jarg1; 
  result = (UA_NodeId *)& ((arg1)->typeId);
  *(UA_NodeId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1DataType_1memSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UA_DataType *arg1 = (UA_DataType *) 0 ;
  UA_UInt16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_DataType **)&jarg1; 
  arg2 = (UA_UInt16)jarg2; 
  if (arg1) (arg1)->memSize = arg2;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1DataType_1memSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UA_DataType *arg1 = (UA_DataType *) 0 ;
  UA_UInt16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_DataType **)&jarg1; 
  result = (UA_UInt16) ((arg1)->memSize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1DataType_1typeIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UA_DataType *arg1 = (UA_DataType *) 0 ;
  UA_UInt16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_DataType **)&jarg1; 
  arg2 = (UA_UInt16)jarg2; 
  if (arg1) (arg1)->typeIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1DataType_1typeIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UA_DataType *arg1 = (UA_DataType *) 0 ;
  UA_UInt16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_DataType **)&jarg1; 
  result = (UA_UInt16) ((arg1)->typeIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1DataType_1typeKind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UA_DataType *arg1 = (UA_DataType *) 0 ;
  UA_UInt32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_DataType **)&jarg1; 
  arg2 = (UA_UInt32)jarg2; 
  if (arg1) (arg1)->typeKind = arg2;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1DataType_1typeKind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UA_DataType *arg1 = (UA_DataType *) 0 ;
  UA_UInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_DataType **)&jarg1; 
  result = (UA_UInt32) ((arg1)->typeKind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1DataType_1pointerFree_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UA_DataType *arg1 = (UA_DataType *) 0 ;
  UA_UInt32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_DataType **)&jarg1; 
  arg2 = (UA_UInt32)jarg2; 
  if (arg1) (arg1)->pointerFree = arg2;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1DataType_1pointerFree_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UA_DataType *arg1 = (UA_DataType *) 0 ;
  UA_UInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_DataType **)&jarg1; 
  result = (UA_UInt32) ((arg1)->pointerFree);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1DataType_1overlayable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UA_DataType *arg1 = (UA_DataType *) 0 ;
  UA_UInt32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_DataType **)&jarg1; 
  arg2 = (UA_UInt32)jarg2; 
  if (arg1) (arg1)->overlayable = arg2;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1DataType_1overlayable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UA_DataType *arg1 = (UA_DataType *) 0 ;
  UA_UInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_DataType **)&jarg1; 
  result = (UA_UInt32) ((arg1)->overlayable);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1DataType_1membersSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UA_DataType *arg1 = (UA_DataType *) 0 ;
  UA_UInt32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_DataType **)&jarg1; 
  arg2 = (UA_UInt32)jarg2; 
  if (arg1) (arg1)->membersSize = arg2;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1DataType_1membersSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UA_DataType *arg1 = (UA_DataType *) 0 ;
  UA_UInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_DataType **)&jarg1; 
  result = (UA_UInt32) ((arg1)->membersSize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1DataType_1binaryEncodingId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UA_DataType *arg1 = (UA_DataType *) 0 ;
  UA_UInt32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_DataType **)&jarg1; 
  arg2 = (UA_UInt32)jarg2; 
  if (arg1) (arg1)->binaryEncodingId = arg2;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1DataType_1binaryEncodingId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UA_DataType *arg1 = (UA_DataType *) 0 ;
  UA_UInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_DataType **)&jarg1; 
  result = (UA_UInt32) ((arg1)->binaryEncodingId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1DataType_1members_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  UA_DataType *arg1 = (UA_DataType *) 0 ;
  UA_DataTypeMember *arg2 = (UA_DataTypeMember *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(UA_DataType **)&jarg1; 
  arg2 = *(UA_DataTypeMember **)&jarg2; 
  if (arg1) (arg1)->members = arg2;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_UA_1DataType_1members_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UA_DataType *arg1 = (UA_DataType *) 0 ;
  UA_DataTypeMember *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_DataType **)&jarg1; 
  result = (UA_DataTypeMember *) ((arg1)->members);
  *(UA_DataTypeMember **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_new_1UA_1DataType(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UA_DataType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UA_DataType *)new UA_DataType();
  *(UA_DataType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_delete_1UA_1DataType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UA_DataType *arg1 = (UA_DataType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UA_DataType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1DataTypeMember_1memberTypeIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UA_DataTypeMember *arg1 = (UA_DataTypeMember *) 0 ;
  UA_UInt16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_DataTypeMember **)&jarg1; 
  arg2 = (UA_UInt16)jarg2; 
  if (arg1) (arg1)->memberTypeIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1DataTypeMember_1memberTypeIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UA_DataTypeMember *arg1 = (UA_DataTypeMember *) 0 ;
  UA_UInt16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_DataTypeMember **)&jarg1; 
  result = (UA_UInt16) ((arg1)->memberTypeIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1DataTypeMember_1padding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  UA_DataTypeMember *arg1 = (UA_DataTypeMember *) 0 ;
  UA_Byte arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_DataTypeMember **)&jarg1; 
  arg2 = (UA_Byte)jarg2; 
  if (arg1) (arg1)->padding = arg2;
}


SWIGEXPORT jshort JNICALL Java_open62Wrap_open62541JNI_UA_1DataTypeMember_1padding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  UA_DataTypeMember *arg1 = (UA_DataTypeMember *) 0 ;
  UA_Byte result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_DataTypeMember **)&jarg1; 
  result = (UA_Byte) ((arg1)->padding);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1DataTypeMember_1namespaceZero_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  UA_DataTypeMember *arg1 = (UA_DataTypeMember *) 0 ;
  UA_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_DataTypeMember **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->namespaceZero = arg2;
}


SWIGEXPORT jboolean JNICALL Java_open62Wrap_open62541JNI_UA_1DataTypeMember_1namespaceZero_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  UA_DataTypeMember *arg1 = (UA_DataTypeMember *) 0 ;
  UA_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_DataTypeMember **)&jarg1; 
  result = (UA_Boolean) ((arg1)->namespaceZero);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1DataTypeMember_1isArray_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  UA_DataTypeMember *arg1 = (UA_DataTypeMember *) 0 ;
  UA_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_DataTypeMember **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isArray = arg2;
}


SWIGEXPORT jboolean JNICALL Java_open62Wrap_open62541JNI_UA_1DataTypeMember_1isArray_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  UA_DataTypeMember *arg1 = (UA_DataTypeMember *) 0 ;
  UA_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_DataTypeMember **)&jarg1; 
  result = (UA_Boolean) ((arg1)->isArray);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_new_1UA_1DataTypeMember(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UA_DataTypeMember *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UA_DataTypeMember *)new UA_DataTypeMember();
  *(UA_DataTypeMember **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_delete_1UA_1DataTypeMember(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UA_DataTypeMember *arg1 = (UA_DataTypeMember *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UA_DataTypeMember **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1Guid_1data1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UA_Guid *arg1 = (UA_Guid *) 0 ;
  UA_UInt32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Guid **)&jarg1; 
  arg2 = (UA_UInt32)jarg2; 
  if (arg1) (arg1)->data1 = arg2;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1Guid_1data1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UA_Guid *arg1 = (UA_Guid *) 0 ;
  UA_UInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Guid **)&jarg1; 
  result = (UA_UInt32) ((arg1)->data1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1Guid_1data2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UA_Guid *arg1 = (UA_Guid *) 0 ;
  UA_UInt16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Guid **)&jarg1; 
  arg2 = (UA_UInt16)jarg2; 
  if (arg1) (arg1)->data2 = arg2;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1Guid_1data2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UA_Guid *arg1 = (UA_Guid *) 0 ;
  UA_UInt16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Guid **)&jarg1; 
  result = (UA_UInt16) ((arg1)->data2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1Guid_1data3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UA_Guid *arg1 = (UA_Guid *) 0 ;
  UA_UInt16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Guid **)&jarg1; 
  arg2 = (UA_UInt16)jarg2; 
  if (arg1) (arg1)->data3 = arg2;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_UA_1Guid_1data3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UA_Guid *arg1 = (UA_Guid *) 0 ;
  UA_UInt16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Guid **)&jarg1; 
  result = (UA_UInt16) ((arg1)->data3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_UA_1Guid_1data4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2) {
  UA_Guid *arg1 = (UA_Guid *) 0 ;
  UA_Byte *arg2 ;
  jshort *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Guid **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUchar(jenv, &jarr2, (unsigned char **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    UA_Byte *b = (UA_Byte *) arg1->data4;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((UA_Byte *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutUchar(jenv, jarr2, (unsigned char *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jshortArray JNICALL Java_open62Wrap_open62541JNI_UA_1Guid_1data4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshortArray jresult = 0 ;
  UA_Guid *arg1 = (UA_Guid *) 0 ;
  UA_Byte *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Guid **)&jarg1; 
  result = (UA_Byte *)(UA_Byte *) ((arg1)->data4);
  jresult = SWIG_JavaArrayOutUchar(jenv, (unsigned char *)result, 8); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_new_1UA_1Guid(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UA_Guid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UA_Guid *)new UA_Guid();
  *(UA_Guid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_delete_1UA_1Guid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UA_Guid *arg1 = (UA_Guid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UA_Guid **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_void2int(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  jlong arg1 ;
  UA_Int32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  result = (UA_Int32)void2int(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_open62Wrap_open62541JNI_void2str(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  jlong arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  result = (char *)void2str(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_open62Wrap_open62541JNI_IsVariantType_1Int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  UA_Variant *arg1 = (UA_Variant *) 0 ;
  UA_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Variant **)&jarg1; 
  result = (UA_Boolean)IsVariantType_Int(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_open62Wrap_open62541JNI_IsVariantType_1String(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  UA_Variant *arg1 = (UA_Variant *) 0 ;
  UA_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UA_Variant **)&jarg1; 
  result = (UA_Boolean)IsVariantType_String(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_new_1intp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)new_intp();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_open62Wrap_open62541JNI_copy_1intp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int *)copy_intp(arg1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_delete_1intp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int *arg1 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  delete_intp(arg1);
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_intp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  int *arg1 = (int *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  intp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_open62Wrap_open62541JNI_intp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  result = (int)intp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_open62Wrap_open62541JNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[5] = {
    {
      "SwigDirector_ServerAPIBase_monitored_itemChanged", "(Lopen62Wrap/ServerAPIBase;JI)V" 
    },
    {
      "SwigDirector_ServerAPIBase_methods_callback", "(Lopen62Wrap/ServerAPIBase;JJLjava/lang/String;Ljava/lang/String;J)V" 
    },
    {
      "SwigDirector_ClientAPIBase_monitored_itemChanged", "(Lopen62Wrap/ClientAPIBase;JI)V" 
    },
    {
      "SwigDirector_ClientAPIBase_client_connected", "(Lopen62Wrap/ClientAPIBase;JJLjava/lang/String;)V" 
    },
    {
      "SwigDirector_ClientAPIBase_methods_callback", "(Lopen62Wrap/ClientAPIBase;JJLjava/lang/String;Ljava/lang/String;J)V" 
    }
  };
  Swig::jclass_open62541JNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_open62541JNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

